-- SHA-256 (Minified) By KillaVanilla
k={0x428a2f98,0x71374491,0xb5c0fbcf,0xe9b5dba5,0x3956c25b,0x59f111f1,0x923f82a4,0xab1c5ed5,0xd807aa98,0x12835b01,0x243185be,0x550c7dc3,0x72be5d74,0x80deb1fe,0x9bdc06a7,0xc19bf174,0xe49b69c1,0xefbe4786,0x0fc19dc6,0x240ca1cc,0x2de92c6f,0x4a7484aa,0x5cb0a9dc,0x76f988da,0x983e5152,0xa831c66d,0xb00327c8,0xbf597fc7,0xc6e00bf3,0xd5a79147,0x06ca6351,0x14292967,0x27b70a85,0x2e1b2138,0x4d2c6dfc,0x53380d13,0x650a7354,0x766a0abb,0x81c2c92e,0x92722c85,0xa2bfe8a1,0xa81a664b,0xc24b8b70,0xc76c51a3,0xd192e819,0xd6990624,0xf40e3585,0x106aa070,0x19a4c116,0x1e376c08,0x2748774c,0x34b0bcb5,0x391c0cb3,0x4ed8aa4a,0x5b9cca4f,0x682e6ff3,0x748f82ee,0x78a5636f,0x84c87814,0x8cc70208,0x90befffa,0xa4506ceb,0xbef9a3f7,0xc67178f2}local function a(b)local c=0;for d=1,b do bit.bor(c,0x8000000)bit.brshift(c,1)end;return c end;local function e(f,g)if f>2^32 then f=f%2^32 end;return bit.bor(bit.brshift(f,g),bit.blshift(f,32-g))end;local function h(i)local j=#i*8;local b=#i*8;table.insert(i,1)while true do if b%512==448 then break else table.insert(i,0)b=#i*8 end end;table.insert(i,j)return i end;local function l(i)local m={}local n=1;for o=1,#i,16 do m[n]={}table.insert(m[n],i[o]or 0)table.insert(m[n],i[o+1]or 0)table.insert(m[n],i[o+2]or 0)table.insert(m[n],i[o+3]or 0)table.insert(m[n],i[o+4]or 0)table.insert(m[n],i[o+5]or 0)table.insert(m[n],i[o+6]or 0)table.insert(m[n],i[o+7]or 0)table.insert(m[n],i[o+8]or 0)table.insert(m[n],i[o+9]or 0)table.insert(m[n],i[o+10]or 0)table.insert(m[n],i[o+11]or 0)table.insert(m[n],i[o+12]or 0)table.insert(m[n],i[o+13]or 0)table.insert(m[n],i[o+14]or 0)table.insert(m[n],i[o+15]or 0)n=n+1 end;return m end;local function p(n,q)for d=17,64 do local r=bit.bxor(bit.brshift(n[d-15],3),bit.bxor(e(n[d-15],7),e(n[d-15],18)))local s=bit.bxor(bit.brshift(n[d-2],10),bit.bxor(e(n[d-2],17),e(n[d-2],19)))n[d]=(n[d-16]+r+n[d-7]+s)%2^32 end;local t=q[1]local u=q[2]local v=q[3]local w=q[4]local x=q[5]local y=q[6]local z=q[7]local A=q[8]for d=1,64 do local B=bit.bxor(e(x,6),bit.bxor(e(x,11),e(x,25)))local C=bit.bxor(bit.band(x,y),bit.band(bit.bnot(x),z))local D=A+B+C+k[d]+n[d]S0=bit.bxor(e(t,2),bit.bxor(e(t,13),e(t,22)))local E=bit.bxor(bit.band(t,bit.bxor(u,v)),bit.band(u,v))local F=S0+E;A=z;z=y;y=x;x=w+D;w=v;v=u;u=t;t=D+F;t=t%2^32;u=u%2^32;v=v%2^32;w=w%2^32;x=x%2^32;y=y%2^32;z=z%2^32;A=A%2^32 end;q[1]=(q[1]+t)%2^32;q[2]=(q[2]+u)%2^32;q[3]=(q[3]+v)%2^32;q[4]=(q[4]+w)%2^32;q[5]=(q[5]+x)%2^32;q[6]=(q[6]+y)%2^32;q[7]=(q[7]+z)%2^32;q[8]=(q[8]+A)%2^32;return q end;function digest(G)G=h(G)local q={0x6a09e667,0xbb67ae85,0x3c6ef372,0xa54ff53a,0x510e527f,0x9b05688c,0x1f83d9ab,0x5be0cd19}local m=l(G)for d=1,#m do q=p(m[d],q)end;return q end;function digestStr(f)local H={}local I=""for d=1,#f do H[d]=string.byte(f,d,d)end;H=digest(H)for d=1,#H do I=I..string.format("%X",H[d])end;return I,H end;function hashToBytes(q)local J={}for d=1,8 do table.insert(J,bit.band(bit.brshift(bit.band(q[d],0xFF000000),24),0xFF))table.insert(J,bit.band(bit.brshift(bit.band(q[d],0xFF0000),16),0xFF))table.insert(J,bit.band(bit.brshift(bit.band(q[d],0xFF00),8),0xFF))table.insert(J,bit.band(q[d],0xFF))end;return J end;function hmac(f,K)if#K>32 then local L=digest(K)K=L elseif#K<32 then for d=#K,32 do K[d]=0 end end;local M={}local N={}for d=1,32 do M[d]=bit.bxor(0x5C,K[d]or 0)N[d]=bit.bxor(0x36,K[d]or 0)end;local O={}for d=1,#f do N[32+d]=f[d]end;local P=hashToBytes(digest(N))N=P;for d=1,32 do O[d]=M[d]O[32+d]=N[d]end;return digest(O)end
