-- AES (Minified) By KillaVanilla
local a={[0]=0x63,0x7C,0x77,0x7B,0xF2,0x6B,0x6F,0xC5,0x30,0x01,0x67,0x2B,0xFE,0xD7,0xAB,0x76,0xCA,0x82,0xC9,0x7D,0xFA,0x59,0x47,0xF0,0xAD,0xD4,0xA2,0xAF,0x9C,0xA4,0x72,0xC0,0xB7,0xFD,0x93,0x26,0x36,0x3F,0xF7,0xCC,0x34,0xA5,0xE5,0xF1,0x71,0xD8,0x31,0x15,0x04,0xC7,0x23,0xC3,0x18,0x96,0x05,0x9A,0x07,0x12,0x80,0xE2,0xEB,0x27,0xB2,0x75,0x09,0x83,0x2C,0x1A,0x1B,0x6E,0x5A,0xA0,0x52,0x3B,0xD6,0xB3,0x29,0xE3,0x2F,0x84,0x53,0xD1,0x00,0xED,0x20,0xFC,0xB1,0x5B,0x6A,0xCB,0xBE,0x39,0x4A,0x4C,0x58,0xCF,0xD0,0xEF,0xAA,0xFB,0x43,0x4D,0x33,0x85,0x45,0xF9,0x02,0x7F,0x50,0x3C,0x9F,0xA8,0x51,0xA3,0x40,0x8F,0x92,0x9D,0x38,0xF5,0xBC,0xB6,0xDA,0x21,0x10,0xFF,0xF3,0xD2,0xCD,0x0C,0x13,0xEC,0x5F,0x97,0x44,0x17,0xC4,0xA7,0x7E,0x3D,0x64,0x5D,0x19,0x73,0x60,0x81,0x4F,0xDC,0x22,0x2A,0x90,0x88,0x46,0xEE,0xB8,0x14,0xDE,0x5E,0x0B,0xDB,0xE0,0x32,0x3A,0x0A,0x49,0x06,0x24,0x5C,0xC2,0xD3,0xAC,0x62,0x91,0x95,0xE4,0x79,0xE7,0xC8,0x37,0x6D,0x8D,0xD5,0x4E,0xA9,0x6C,0x56,0xF4,0xEA,0x65,0x7A,0xAE,0x08,0xBA,0x78,0x25,0x2E,0x1C,0xA6,0xB4,0xC6,0xE8,0xDD,0x74,0x1F,0x4B,0xBD,0x8B,0x8A,0x70,0x3E,0xB5,0x66,0x48,0x03,0xF6,0x0E,0x61,0x35,0x57,0xB9,0x86,0xC1,0x1D,0x9E,0xE1,0xF8,0x98,0x11,0x69,0xD9,0x8E,0x94,0x9B,0x1E,0x87,0xE9,0xCE,0x55,0x28,0xDF,0x8C,0xA1,0x89,0x0D,0xBF,0xE6,0x42,0x68,0x41,0x99,0x2D,0x0F,0xB0,0x54,0xBB,0x16}local b={[0]=0x52,0x09,0x6A,0xD5,0x30,0x36,0xA5,0x38,0xBF,0x40,0xA3,0x9E,0x81,0xF3,0xD7,0xFB,0x7C,0xE3,0x39,0x82,0x9B,0x2F,0xFF,0x87,0x34,0x8E,0x43,0x44,0xC4,0xDE,0xE9,0xCB,0x54,0x7B,0x94,0x32,0xA6,0xC2,0x23,0x3D,0xEE,0x4C,0x95,0x0B,0x42,0xFA,0xC3,0x4E,0x08,0x2E,0xA1,0x66,0x28,0xD9,0x24,0xB2,0x76,0x5B,0xA2,0x49,0x6D,0x8B,0xD1,0x25,0x72,0xF8,0xF6,0x64,0x86,0x68,0x98,0x16,0xD4,0xA4,0x5C,0xCC,0x5D,0x65,0xB6,0x92,0x6C,0x70,0x48,0x50,0xFD,0xED,0xB9,0xDA,0x5E,0x15,0x46,0x57,0xA7,0x8D,0x9D,0x84,0x90,0xD8,0xAB,0x00,0x8C,0xBC,0xD3,0x0A,0xF7,0xE4,0x58,0x05,0xB8,0xB3,0x45,0x06,0xD0,0x2C,0x1E,0x8F,0xCA,0x3F,0x0F,0x02,0xC1,0xAF,0xBD,0x03,0x01,0x13,0x8A,0x6B,0x3A,0x91,0x11,0x41,0x4F,0x67,0xDC,0xEA,0x97,0xF2,0xCF,0xCE,0xF0,0xB4,0xE6,0x73,0x96,0xAC,0x74,0x22,0xE7,0xAD,0x35,0x85,0xE2,0xF9,0x37,0xE8,0x1C,0x75,0xDF,0x6E,0x47,0xF1,0x1A,0x71,0x1D,0x29,0xC5,0x89,0x6F,0xB7,0x62,0x0E,0xAA,0x18,0xBE,0x1B,0xFC,0x56,0x3E,0x4B,0xC6,0xD2,0x79,0x20,0x9A,0xDB,0xC0,0xFE,0x78,0xCD,0x5A,0xF4,0x1F,0xDD,0xA8,0x33,0x88,0x07,0xC7,0x31,0xB1,0x12,0x10,0x59,0x27,0x80,0xEC,0x5F,0x60,0x51,0x7F,0xA9,0x19,0xB5,0x4A,0x0D,0x2D,0xE5,0x7A,0x9F,0x93,0xC9,0x9C,0xEF,0xA0,0xE0,0x3B,0x4D,0xAE,0x2A,0xF5,0xB0,0xC8,0xEB,0xBB,0x3C,0x83,0x53,0x99,0x61,0x17,0x2B,0x04,0x7E,0xBA,0x77,0xD6,0x26,0xE1,0x69,0x14,0x63,0x55,0x21,0x0C,0x7D}local c={[0]=0x8d,0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80,0x1b,0x36,0x6c,0xd8,0xab,0x4d,0x9a,0x2f,0x5e,0xbc,0x63,0xc6,0x97,0x35,0x6a,0xd4,0xb3,0x7d,0xfa,0xef,0xc5,0x91,0x39,0x72,0xe4,0xd3,0xbd,0x61,0xc2,0x9f,0x25,0x4a,0x94,0x33,0x66,0xcc,0x83,0x1d,0x3a,0x74,0xe8,0xcb,0x8d,0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80,0x1b,0x36,0x6c,0xd8,0xab,0x4d,0x9a,0x2f,0x5e,0xbc,0x63,0xc6,0x97,0x35,0x6a,0xd4,0xb3,0x7d,0xfa,0xef,0xc5,0x91,0x39,0x72,0xe4,0xd3,0xbd,0x61,0xc2,0x9f,0x25,0x4a,0x94,0x33,0x66,0xcc,0x83,0x1d,0x3a,0x74,0xe8,0xcb,0x8d,0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80,0x1b,0x36,0x6c,0xd8,0xab,0x4d,0x9a,0x2f,0x5e,0xbc,0x63,0xc6,0x97,0x35,0x6a,0xd4,0xb3,0x7d,0xfa,0xef,0xc5,0x91,0x39,0x72,0xe4,0xd3,0xbd,0x61,0xc2,0x9f,0x25,0x4a,0x94,0x33,0x66,0xcc,0x83,0x1d,0x3a,0x74,0xe8,0xcb,0x8d,0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80,0x1b,0x36,0x6c,0xd8,0xab,0x4d,0x9a,0x2f,0x5e,0xbc,0x63,0xc6,0x97,0x35,0x6a,0xd4,0xb3,0x7d,0xfa,0xef,0xc5,0x91,0x39,0x72,0xe4,0xd3,0xbd,0x61,0xc2,0x9f,0x25,0x4a,0x94,0x33,0x66,0xcc,0x83,0x1d,0x3a,0x74,0xe8,0xcb,0x8d,0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80,0x1b,0x36,0x6c,0xd8,0xab,0x4d,0x9a,0x2f,0x5e,0xbc,0x63,0xc6,0x97,0x35,0x6a,0xd4,0xb3,0x7d,0xfa,0xef,0xc5,0x91,0x39,0x72,0xe4,0xd3,0xbd,0x61,0xc2,0x9f,0x25,0x4a,0x94,0x33,0x66,0xcc,0x83,0x1d,0x3a,0x74,0xe8,0xcb,0x8d}local d={[0]=0x00,0x02,0x04,0x06,0x08,0x0a,0x0c,0x0e,0x10,0x12,0x14,0x16,0x18,0x1a,0x1c,0x1e,0x20,0x22,0x24,0x26,0x28,0x2a,0x2c,0x2e,0x30,0x32,0x34,0x36,0x38,0x3a,0x3c,0x3e,0x40,0x42,0x44,0x46,0x48,0x4a,0x4c,0x4e,0x50,0x52,0x54,0x56,0x58,0x5a,0x5c,0x5e,0x60,0x62,0x64,0x66,0x68,0x6a,0x6c,0x6e,0x70,0x72,0x74,0x76,0x78,0x7a,0x7c,0x7e,0x80,0x82,0x84,0x86,0x88,0x8a,0x8c,0x8e,0x90,0x92,0x94,0x96,0x98,0x9a,0x9c,0x9e,0xa0,0xa2,0xa4,0xa6,0xa8,0xaa,0xac,0xae,0xb0,0xb2,0xb4,0xb6,0xb8,0xba,0xbc,0xbe,0xc0,0xc2,0xc4,0xc6,0xc8,0xca,0xcc,0xce,0xd0,0xd2,0xd4,0xd6,0xd8,0xda,0xdc,0xde,0xe0,0xe2,0xe4,0xe6,0xe8,0xea,0xec,0xee,0xf0,0xf2,0xf4,0xf6,0xf8,0xfa,0xfc,0xfe,0x1b,0x19,0x1f,0x1d,0x13,0x11,0x17,0x15,0x0b,0x09,0x0f,0x0d,0x03,0x01,0x07,0x05,0x3b,0x39,0x3f,0x3d,0x33,0x31,0x37,0x35,0x2b,0x29,0x2f,0x2d,0x23,0x21,0x27,0x25,0x5b,0x59,0x5f,0x5d,0x53,0x51,0x57,0x55,0x4b,0x49,0x4f,0x4d,0x43,0x41,0x47,0x45,0x7b,0x79,0x7f,0x7d,0x73,0x71,0x77,0x75,0x6b,0x69,0x6f,0x6d,0x63,0x61,0x67,0x65,0x9b,0x99,0x9f,0x9d,0x93,0x91,0x97,0x95,0x8b,0x89,0x8f,0x8d,0x83,0x81,0x87,0x85,0xbb,0xb9,0xbf,0xbd,0xb3,0xb1,0xb7,0xb5,0xab,0xa9,0xaf,0xad,0xa3,0xa1,0xa7,0xa5,0xdb,0xd9,0xdf,0xdd,0xd3,0xd1,0xd7,0xd5,0xcb,0xc9,0xcf,0xcd,0xc3,0xc1,0xc7,0xc5,0xfb,0xf9,0xff,0xfd,0xf3,0xf1,0xf7,0xf5,0xeb,0xe9,0xef,0xed,0xe3,0xe1,0xe7,0xe5}local e={[0]=0x00,0x03,0x06,0x05,0x0c,0x0f,0x0a,0x09,0x18,0x1b,0x1e,0x1d,0x14,0x17,0x12,0x11,0x30,0x33,0x36,0x35,0x3c,0x3f,0x3a,0x39,0x28,0x2b,0x2e,0x2d,0x24,0x27,0x22,0x21,0x60,0x63,0x66,0x65,0x6c,0x6f,0x6a,0x69,0x78,0x7b,0x7e,0x7d,0x74,0x77,0x72,0x71,0x50,0x53,0x56,0x55,0x5c,0x5f,0x5a,0x59,0x48,0x4b,0x4e,0x4d,0x44,0x47,0x42,0x41,0xc0,0xc3,0xc6,0xc5,0xcc,0xcf,0xca,0xc9,0xd8,0xdb,0xde,0xdd,0xd4,0xd7,0xd2,0xd1,0xf0,0xf3,0xf6,0xf5,0xfc,0xff,0xfa,0xf9,0xe8,0xeb,0xee,0xed,0xe4,0xe7,0xe2,0xe1,0xa0,0xa3,0xa6,0xa5,0xac,0xaf,0xaa,0xa9,0xb8,0xbb,0xbe,0xbd,0xb4,0xb7,0xb2,0xb1,0x90,0x93,0x96,0x95,0x9c,0x9f,0x9a,0x99,0x88,0x8b,0x8e,0x8d,0x84,0x87,0x82,0x81,0x9b,0x98,0x9d,0x9e,0x97,0x94,0x91,0x92,0x83,0x80,0x85,0x86,0x8f,0x8c,0x89,0x8a,0xab,0xa8,0xad,0xae,0xa7,0xa4,0xa1,0xa2,0xb3,0xb0,0xb5,0xb6,0xbf,0xbc,0xb9,0xba,0xfb,0xf8,0xfd,0xfe,0xf7,0xf4,0xf1,0xf2,0xe3,0xe0,0xe5,0xe6,0xef,0xec,0xe9,0xea,0xcb,0xc8,0xcd,0xce,0xc7,0xc4,0xc1,0xc2,0xd3,0xd0,0xd5,0xd6,0xdf,0xdc,0xd9,0xda,0x5b,0x58,0x5d,0x5e,0x57,0x54,0x51,0x52,0x43,0x40,0x45,0x46,0x4f,0x4c,0x49,0x4a,0x6b,0x68,0x6d,0x6e,0x67,0x64,0x61,0x62,0x73,0x70,0x75,0x76,0x7f,0x7c,0x79,0x7a,0x3b,0x38,0x3d,0x3e,0x37,0x34,0x31,0x32,0x23,0x20,0x25,0x26,0x2f,0x2c,0x29,0x2a,0x0b,0x08,0x0d,0x0e,0x07,0x04,0x01,0x02,0x13,0x10,0x15,0x16,0x1f,0x1c,0x19,0x1a}local f={[0]=0x00,0x09,0x12,0x1b,0x24,0x2d,0x36,0x3f,0x48,0x41,0x5a,0x53,0x6c,0x65,0x7e,0x77,0x90,0x99,0x82,0x8b,0xb4,0xbd,0xa6,0xaf,0xd8,0xd1,0xca,0xc3,0xfc,0xf5,0xee,0xe7,0x3b,0x32,0x29,0x20,0x1f,0x16,0x0d,0x04,0x73,0x7a,0x61,0x68,0x57,0x5e,0x45,0x4c,0xab,0xa2,0xb9,0xb0,0x8f,0x86,0x9d,0x94,0xe3,0xea,0xf1,0xf8,0xc7,0xce,0xd5,0xdc,0x76,0x7f,0x64,0x6d,0x52,0x5b,0x40,0x49,0x3e,0x37,0x2c,0x25,0x1a,0x13,0x08,0x01,0xe6,0xef,0xf4,0xfd,0xc2,0xcb,0xd0,0xd9,0xae,0xa7,0xbc,0xb5,0x8a,0x83,0x98,0x91,0x4d,0x44,0x5f,0x56,0x69,0x60,0x7b,0x72,0x05,0x0c,0x17,0x1e,0x21,0x28,0x33,0x3a,0xdd,0xd4,0xcf,0xc6,0xf9,0xf0,0xeb,0xe2,0x95,0x9c,0x87,0x8e,0xb1,0xb8,0xa3,0xaa,0xec,0xe5,0xfe,0xf7,0xc8,0xc1,0xda,0xd3,0xa4,0xad,0xb6,0xbf,0x80,0x89,0x92,0x9b,0x7c,0x75,0x6e,0x67,0x58,0x51,0x4a,0x43,0x34,0x3d,0x26,0x2f,0x10,0x19,0x02,0x0b,0xd7,0xde,0xc5,0xcc,0xf3,0xfa,0xe1,0xe8,0x9f,0x96,0x8d,0x84,0xbb,0xb2,0xa9,0xa0,0x47,0x4e,0x55,0x5c,0x63,0x6a,0x71,0x78,0x0f,0x06,0x1d,0x14,0x2b,0x22,0x39,0x30,0x9a,0x93,0x88,0x81,0xbe,0xb7,0xac,0xa5,0xd2,0xdb,0xc0,0xc9,0xf6,0xff,0xe4,0xed,0x0a,0x03,0x18,0x11,0x2e,0x27,0x3c,0x35,0x42,0x4b,0x50,0x59,0x66,0x6f,0x74,0x7d,0xa1,0xa8,0xb3,0xba,0x85,0x8c,0x97,0x9e,0xe9,0xe0,0xfb,0xf2,0xcd,0xc4,0xdf,0xd6,0x31,0x38,0x23,0x2a,0x15,0x1c,0x07,0x0e,0x79,0x70,0x6b,0x62,0x5d,0x54,0x4f,0x46}local g={[0]=0x00,0x0b,0x16,0x1d,0x2c,0x27,0x3a,0x31,0x58,0x53,0x4e,0x45,0x74,0x7f,0x62,0x69,0xb0,0xbb,0xa6,0xad,0x9c,0x97,0x8a,0x81,0xe8,0xe3,0xfe,0xf5,0xc4,0xcf,0xd2,0xd9,0x7b,0x70,0x6d,0x66,0x57,0x5c,0x41,0x4a,0x23,0x28,0x35,0x3e,0x0f,0x04,0x19,0x12,0xcb,0xc0,0xdd,0xd6,0xe7,0xec,0xf1,0xfa,0x93,0x98,0x85,0x8e,0xbf,0xb4,0xa9,0xa2,0xf6,0xfd,0xe0,0xeb,0xda,0xd1,0xcc,0xc7,0xae,0xa5,0xb8,0xb3,0x82,0x89,0x94,0x9f,0x46,0x4d,0x50,0x5b,0x6a,0x61,0x7c,0x77,0x1e,0x15,0x08,0x03,0x32,0x39,0x24,0x2f,0x8d,0x86,0x9b,0x90,0xa1,0xaa,0xb7,0xbc,0xd5,0xde,0xc3,0xc8,0xf9,0xf2,0xef,0xe4,0x3d,0x36,0x2b,0x20,0x11,0x1a,0x07,0x0c,0x65,0x6e,0x73,0x78,0x49,0x42,0x5f,0x54,0xf7,0xfc,0xe1,0xea,0xdb,0xd0,0xcd,0xc6,0xaf,0xa4,0xb9,0xb2,0x83,0x88,0x95,0x9e,0x47,0x4c,0x51,0x5a,0x6b,0x60,0x7d,0x76,0x1f,0x14,0x09,0x02,0x33,0x38,0x25,0x2e,0x8c,0x87,0x9a,0x91,0xa0,0xab,0xb6,0xbd,0xd4,0xdf,0xc2,0xc9,0xf8,0xf3,0xee,0xe5,0x3c,0x37,0x2a,0x21,0x10,0x1b,0x06,0x0d,0x64,0x6f,0x72,0x79,0x48,0x43,0x5e,0x55,0x01,0x0a,0x17,0x1c,0x2d,0x26,0x3b,0x30,0x59,0x52,0x4f,0x44,0x75,0x7e,0x63,0x68,0xb1,0xba,0xa7,0xac,0x9d,0x96,0x8b,0x80,0xe9,0xe2,0xff,0xf4,0xc5,0xce,0xd3,0xd8,0x7a,0x71,0x6c,0x67,0x56,0x5d,0x40,0x4b,0x22,0x29,0x34,0x3f,0x0e,0x05,0x18,0x13,0xca,0xc1,0xdc,0xd7,0xe6,0xed,0xf0,0xfb,0x92,0x99,0x84,0x8f,0xbe,0xb5,0xa8,0xa3}local h={[0]=0x00,0x0d,0x1a,0x17,0x34,0x39,0x2e,0x23,0x68,0x65,0x72,0x7f,0x5c,0x51,0x46,0x4b,0xd0,0xdd,0xca,0xc7,0xe4,0xe9,0xfe,0xf3,0xb8,0xb5,0xa2,0xaf,0x8c,0x81,0x96,0x9b,0xbb,0xb6,0xa1,0xac,0x8f,0x82,0x95,0x98,0xd3,0xde,0xc9,0xc4,0xe7,0xea,0xfd,0xf0,0x6b,0x66,0x71,0x7c,0x5f,0x52,0x45,0x48,0x03,0x0e,0x19,0x14,0x37,0x3a,0x2d,0x20,0x6d,0x60,0x77,0x7a,0x59,0x54,0x43,0x4e,0x05,0x08,0x1f,0x12,0x31,0x3c,0x2b,0x26,0xbd,0xb0,0xa7,0xaa,0x89,0x84,0x93,0x9e,0xd5,0xd8,0xcf,0xc2,0xe1,0xec,0xfb,0xf6,0xd6,0xdb,0xcc,0xc1,0xe2,0xef,0xf8,0xf5,0xbe,0xb3,0xa4,0xa9,0x8a,0x87,0x90,0x9d,0x06,0x0b,0x1c,0x11,0x32,0x3f,0x28,0x25,0x6e,0x63,0x74,0x79,0x5a,0x57,0x40,0x4d,0xda,0xd7,0xc0,0xcd,0xee,0xe3,0xf4,0xf9,0xb2,0xbf,0xa8,0xa5,0x86,0x8b,0x9c,0x91,0x0a,0x07,0x10,0x1d,0x3e,0x33,0x24,0x29,0x62,0x6f,0x78,0x75,0x56,0x5b,0x4c,0x41,0x61,0x6c,0x7b,0x76,0x55,0x58,0x4f,0x42,0x09,0x04,0x13,0x1e,0x3d,0x30,0x27,0x2a,0xb1,0xbc,0xab,0xa6,0x85,0x88,0x9f,0x92,0xd9,0xd4,0xc3,0xce,0xed,0xe0,0xf7,0xfa,0xb7,0xba,0xad,0xa0,0x83,0x8e,0x99,0x94,0xdf,0xd2,0xc5,0xc8,0xeb,0xe6,0xf1,0xfc,0x67,0x6a,0x7d,0x70,0x53,0x5e,0x49,0x44,0x0f,0x02,0x15,0x18,0x3b,0x36,0x21,0x2c,0x0c,0x01,0x16,0x1b,0x38,0x35,0x22,0x2f,0x64,0x69,0x7e,0x73,0x50,0x5d,0x4a,0x47,0xdc,0xd1,0xc6,0xcb,0xe8,0xe5,0xf2,0xff,0xb4,0xb9,0xae,0xa3,0x80,0x8d,0x9a,0x97}local i={[0]=0x00,0x0e,0x1c,0x12,0x38,0x36,0x24,0x2a,0x70,0x7e,0x6c,0x62,0x48,0x46,0x54,0x5a,0xe0,0xee,0xfc,0xf2,0xd8,0xd6,0xc4,0xca,0x90,0x9e,0x8c,0x82,0xa8,0xa6,0xb4,0xba,0xdb,0xd5,0xc7,0xc9,0xe3,0xed,0xff,0xf1,0xab,0xa5,0xb7,0xb9,0x93,0x9d,0x8f,0x81,0x3b,0x35,0x27,0x29,0x03,0x0d,0x1f,0x11,0x4b,0x45,0x57,0x59,0x73,0x7d,0x6f,0x61,0xad,0xa3,0xb1,0xbf,0x95,0x9b,0x89,0x87,0xdd,0xd3,0xc1,0xcf,0xe5,0xeb,0xf9,0xf7,0x4d,0x43,0x51,0x5f,0x75,0x7b,0x69,0x67,0x3d,0x33,0x21,0x2f,0x05,0x0b,0x19,0x17,0x76,0x78,0x6a,0x64,0x4e,0x40,0x52,0x5c,0x06,0x08,0x1a,0x14,0x3e,0x30,0x22,0x2c,0x96,0x98,0x8a,0x84,0xae,0xa0,0xb2,0xbc,0xe6,0xe8,0xfa,0xf4,0xde,0xd0,0xc2,0xcc,0x41,0x4f,0x5d,0x53,0x79,0x77,0x65,0x6b,0x31,0x3f,0x2d,0x23,0x09,0x07,0x15,0x1b,0xa1,0xaf,0xbd,0xb3,0x99,0x97,0x85,0x8b,0xd1,0xdf,0xcd,0xc3,0xe9,0xe7,0xf5,0xfb,0x9a,0x94,0x86,0x88,0xa2,0xac,0xbe,0xb0,0xea,0xe4,0xf6,0xf8,0xd2,0xdc,0xce,0xc0,0x7a,0x74,0x66,0x68,0x42,0x4c,0x5e,0x50,0x0a,0x04,0x16,0x18,0x32,0x3c,0x2e,0x20,0xec,0xe2,0xf0,0xfe,0xd4,0xda,0xc8,0xc6,0x9c,0x92,0x80,0x8e,0xa4,0xaa,0xb8,0xb6,0x0c,0x02,0x10,0x1e,0x34,0x3a,0x28,0x26,0x7c,0x72,0x60,0x6e,0x44,0x4a,0x58,0x56,0x37,0x39,0x2b,0x25,0x0f,0x01,0x13,0x1d,0x47,0x49,0x5b,0x55,0x7f,0x71,0x63,0x6d,0xd7,0xd9,0xcb,0xc5,0xef,0xe1,0xf3,0xfd,0xa7,0xa9,0xbb,0xb5,0x9f,0x91,0x83,0x8d}local j=bit.bxor;local k=table.insert;local function l(m)local n={}for o,p in pairs(m)do n[o]=p end;return n end;local function q(m,r)for o=1,#m do if not(a[m[o]]and b[m[o]])then error("subBytes: input["..o.."] > 0xFF")end;if r then m[o]=b[m[o]]else m[o]=a[m[o]]end end;return m end;local function s(m)local l={}l[1]=m[1]l[2]=m[2]l[3]=m[3]l[4]=m[4]l[5]=m[6]l[6]=m[7]l[7]=m[8]l[8]=m[5]l[9]=m[11]l[10]=m[12]l[11]=m[9]l[12]=m[10]l[13]=m[16]l[14]=m[13]l[15]=m[14]l[16]=m[15]return l end;local function t(m)local l={}l[1]=m[1]l[2]=m[2]l[3]=m[3]l[4]=m[4]l[5]=m[8]l[6]=m[5]l[7]=m[6]l[8]=m[7]l[9]=m[11]l[10]=m[12]l[11]=m[9]l[12]=m[10]l[13]=m[14]l[14]=m[15]l[15]=m[16]l[16]=m[13]return l end;local function u(v,w)local x=0;local y,z=v,w;for o=1,8 do if y==0 or z==0 then break end;if bit.band(1,z)>0 then x=j(x,y)end;z=bit.brshift(z,1)local A=bit.band(0x80,y)y=bit.band(0xFF,bit.blshift(y,1))if A>0 then y=j(y,0x1B)end end;return x end;local function B(C)local D={}D[1]=j(d[C[1]],j(e[C[2]],j(C[3],C[4])))D[2]=j(C[1],j(d[C[2]],j(e[C[3]],C[4])))D[3]=j(C[1],j(C[2],j(d[C[3]],e[C[4]])))D[4]=j(e[C[1]],j(C[2],j(C[3],d[C[4]])))return D end;local function E(C)local D={}D[1]=j(i[C[1]],j(g[C[2]],j(h[C[3]],f[C[4]])))D[2]=j(f[C[1]],j(i[C[2]],j(g[C[3]],h[C[4]])))D[3]=j(h[C[1]],j(f[C[2]],j(i[C[3]],g[C[4]])))D[4]=j(g[C[1]],j(h[C[2]],j(f[C[3]],i[C[4]])))return D end;local function F(m,r)local D={}local G={m[1],m[5],m[9],m[13]}local H={m[2],m[6],m[10],m[14]}local I={m[3],m[7],m[11],m[15]}local J={m[4],m[8],m[12],m[16]}if r then G=E(G)H=E(H)I=E(I)J=E(J)else G=B(G)H=B(H)I=B(I)J=B(J)end;D[1]=G[1]D[5]=G[2]D[9]=G[3]D[13]=G[4]D[2]=H[1]D[6]=H[2]D[10]=H[3]D[14]=H[4]D[3]=I[1]D[7]=I[2]D[11]=I[3]D[15]=I[4]D[4]=J[1]D[8]=J[2]D[12]=J[3]D[16]=J[4]return D end;local function K(m,L,M)local D={}for o=1,16 do assert(m[o],"input["..o.."]=nil!")assert(L[(M-1)*16+o],"round_key["..(M-1)*16+o.."]=nil!")D[o]=j(m[o],L[(M-1)*16+o])end;return D end;function key_schedule(N)local function O(P,Q,R,S,o)local T=Q;local U=R;local V=S;local W=P;T=j(a[T],c[o])U=a[U]V=a[V]W=a[W]return T,U,V,W end;local X,w,Y=0,0,0;if#N<16 then error("Encryption key is too small; key size must be more than 16 bytes.")elseif#N>=16 and#N<24 then X=16;w=176 elseif#N>=24 and#N<32 then X=24;w=208 else X=32;w=240 end;local L={}local Z=1;for o=1,X do L[o]=N[o]end;while#L<w do local _=L[#L]local a0=L[#L-1]local a1=L[#L-2]local a2=L[#L-3]_,a0,a1,a2=O(_,a0,a1,a2,Z)Z=Z+1;_=j(_,L[#L-(X-1)])a0=j(a0,L[#L-(X-2)])a1=j(a1,L[#L-(X-3)])a2=j(a2,L[#L-(X-4)])k(L,_)k(L,a0)k(L,a1)k(L,a2)for o=1,3 do _=j(L[#L],L[#L-(X-1)])a0=j(L[#L-1],L[#L-(X-2)])a1=j(L[#L-2],L[#L-(X-3)])a2=j(L[#L-3],L[#L-(X-4)])k(L,_)k(L,a0)k(L,a1)k(L,a2)end;if Y==3 then _=j(a[L[#L]],L[#L-(X-1)])a0=j(a[L[#L-1]],L[#L-(X-2)])a1=j(a[L[#L-2]],L[#L-(X-3)])a2=j(a[L[#L-3]],L[#L-(X-4)])k(L,_)k(L,a0)k(L,a1)k(L,a2)end;if Y==2 or Y==3 then local o=2;if Y==3 then o=3 end;for a3=1,o do _=j(L[#L],L[#L-(X-1)])a0=j(L[#L-1],L[#L-(X-2)])a1=j(L[#L-2],L[#L-(X-3)])a2=j(L[#L-3],L[#L-(X-4)])k(L,_)k(L,a0)k(L,a1)k(L,a2)end end end;return L end;local function a4(a5)if type(a5)~="string"then error("breakIntoBlocks: data is not a string",2)end;while#a5%16~=0 do a5=a5 .."\0"end;local a6={}local a7=1;local D={}for o=1,#a5,16 do a6[a7]={}for a3=1,16 do a6[a7][a3]=string.byte(a5,(a7-1)*16+a3,(a7-1)*16+a3)end;a7=a7+1 end;return a6 end;function strToBlocks(a8)local a9={}local a6={}for o=1,#a8 do a9[o]=string.byte(a8,o,o)end;for o=1,math.ceil(#a9/16)do a6[o]={}for a3=1,16 do a6[o][a3]=a9[(o-1)*16+a3]or 0 end end;return a6 end;function encrypt_block(a5,aa)local L=key_schedule(aa)local ab=a5;local ac=0;if#L==176 then ac=10 elseif#L==208 then ac=12 elseif#L==240 then ac=14 else error("encrypt_block: Unknown key size?",2)end;ab=K(ab,L,1)for ad=2,ac-1 do ab=q(ab)ab=s(ab)ab=F(ab)ab=K(ab,L,ad)end;ab=q(ab)ab=s(ab)ab=K(ab,L,ac)return ab end;function decrypt_block(a5,aa)local L=key_schedule(aa)local ab=a5;local ac=0;if#L==176 then ac=10 elseif#L==208 then ac=12 elseif#L==240 then ac=14 else error("decrypt_block: Unknown key size?",2)end;ab=K(ab,L,ac)for ad=ac-1,2,-1 do ab=t(ab)ab=q(ab,true)ab=K(ab,L,ad)ab=F(ab,true)end;ab=t(ab)ab=q(ab,true)ab=K(ab,L,1)return ab end;function encrypt_block_customExpKey(a5,L)local ab=a5;local ac=0;if#L==176 then ac=10 elseif#L==208 then ac=12 elseif#L==240 then ac=14 else error("encrypt_block: Unknown key size?",2)end;ab=K(ab,L,1)for ad=2,ac-1 do ab=q(ab)ab=s(ab)ab=F(ab)ab=K(ab,L,ad)end;ab=q(ab)ab=s(ab)ab=K(ab,L,ac)return ab end;function decrypt_block_customExpKey(a5,L)local ab=a5;local ac=0;if#L==176 then ac=10 elseif#L==208 then ac=12 elseif#L==240 then ac=14 else error("decrypt_block: Unknown key size?",2)end;ab=K(ab,L,ac)for ad=ac-1,2,-1 do ab=t(ab)ab=q(ab,true)ab=K(ab,L,ad)ab=F(ab,true)end;ab=t(ab)ab=q(ab,true)ab=K(ab,L,1)return ab end;function encrypt_bytestream_ecb(a5,aa)local a6={}local ae={}local L=key_schedule(aa)for o=1,#a5,16 do local af={}for a3=1,16 do af[a3]=a5[o+a3-1]or 0 end;af=encrypt_block_customExpKey(af,L)for a3=1,16 do table.insert(ae,af[a3])end;os.queueEvent("")os.pullEvent("")end;return ae end;function decrypt_bytestream_ecb(a5,aa)local ae={}local L=key_schedule(aa)for o=1,#a5,16 do local af={}for a3=1,16 do af[a3]=a5[o+a3-1]or 0 end;af=decrypt_block_customExpKey(af,L)for a3=1,16 do table.insert(ae,af[a3])end;os.queueEvent("")os.pullEvent("")end;for o=#ae,1,-1 do if ae[o]~=0 then break else ae[o]=nil end end;return ae end;function encrypt_bytestream(a5,aa,ag)local a6={ag}local ae={}local L=key_schedule(aa)if not ag then error("encrypt_bytestream: No initalization vector was passed.",2)end;for o=1,#a5 do if a5[o]==nil or a5[o]>=256 then if type(a5[o])=="number"then error("encrypt_bytestream: Invalid data at i="..o.." data[i]="..a5[o],2)else error("encrypt_bytestream: Invalid data at i="..o.." data[i]="..type(a5[o]),2)end end end;local ah=os.clock()for o=1,math.ceil(#a5/16)do local af={}if not a6[o]then error("encrypt_bytestream: blocks["..o.."] is nil! Input size: "..#a5,2)end;for a3=1,16 do af[a3]=a5[(o-1)*16+a3]or 0;af[a3]=j(af[a3],a6[o][a3])end;af=encrypt_block_customExpKey(af,L)table.insert(a6,af)for a3=1,16 do k(ae,af[a3])end;if os.clock()-ah>=2.5 then os.queueEvent("")os.pullEvent("")ah=os.clock()end end;return ae end;function decrypt_bytestream(a5,aa,ag)local a6={ag}local ae={}local L=key_schedule(aa)if not ag then error("decrypt_bytestream: No initalization vector was passed.",2)end;local ah=os.clock()for o=1,math.ceil(#a5/16)do local af={}if not a6[o]then error("decrypt_bytestream: blocks["..o.."] is nil! Input size: "..#a5,2)end;for a3=1,16 do af[a3]=a5[(o-1)*16+a3]or 0 end;table.insert(a6,af)local ai=decrypt_block_customExpKey(af,L)for a3=1,16 do ai[a3]=j(ai[a3],a6[o][a3])table.insert(ae,ai[a3])end;if os.clock()-ah>=2.5 then os.queueEvent("")os.pullEvent("")ah=os.clock()end end;for o=#ae,#ae-15,-1 do if ae[o]~=0 then break else ae[o]=nil end end;return ae end;function encrypt_str(a5,aa,aj)local ak={}for o=1,#a5 do table.insert(ak,string.byte(a5,o,o))end;local al={}if aj then al=encrypt_bytestream(ak,aa,aj)else al=encrypt_bytestream_ecb(ak,aa)end;local D=""for o=1,#al do D=D..string.char(al[o])end;return D end;function decrypt_str(a5,aa,aj)local ak={}for o=1,#a5 do table.insert(ak,string.byte(a5,o,o))end;local al={}if aj then al=decrypt_bytestream(ak,aa,aj)else al=decrypt_bytestream_ecb(ak,aa)end;local D=""for o=1,#al do D=D..string.char(al[o])end;return D end;function davies_meyer(a5,am)local an=am;for ao=1,16 do for o=1,math.ceil(#a5/16)do local af={}for a3=1,16 do af[a3]=a5[(o-1)*16+a3]or 0 end;local af=encrypt_block(an,af)for a3=1,16 do af[a3]=j(af[a3],an[a3])end;an=af;os.queueEvent("")os.pullEvent("")end end;return an end;local function ap(aq)local ar={}for o=1,16 do ar[o]=aq[o]or 0 end;ar[1]=ar[1]+incAmt;for o=2,16 do if ar[o-1]<=255 then break end;local A=ar[o-1]-255;ar[o]=ar[o]+A end;return ar end;local as={key={},ctr={},stream_cache={},set_key=function(self,aa)if type(aa)=="string"then if#aa<16 then error("set_key: Key length ("..#aa..") must be at least 16 characters!",2)end;for o=1,16 do self.key[o]=string.byte(aa,o,o)end elseif type(aa)=="table"then if#aa<16 then error("set_key: Key length ("..#aa..") must be at least 16 bytes!",2)end;for o=1,16 do if type(aa[o])~="number"or aa[o]>255 or aa[o]<0 then if type(aa[o])=="nil"then error("set_key: Value key["..o.."] is invalid: nil",2)else error("set_key: Value key["..o.."] is invalid: "..aa[o],2)end end;self.key[o]=aa[o]end else error("set_key: Key type is not supported: "..type(aa),2)end end,set_ctr=function(self,at)if type(at)=="string"then if#at<16 then error("set_ctr: Counter length ("..#at..") must be at least 16 characters!",2)end;for o=1,16 do self.ctr[o]=string.byte(at,o,o)end elseif type(at)=="table"then if#at<16 then error("set_ctr: Counter length ("..#at..") must be at least 16 bytes!",2)end;for o=1,16 do if type(at[o])~="number"or at[o]>255 or at[o]<0 then if type(at[o])=="nil"then error("set_ctr: Value ctr["..o.."] is invalid: nil",2)else error("set_ctr: Value ctr["..o.."] is invalid: "..at[o],2)end end;self.ctr[o]=at[o]end elseif type(at)=="number"then local au=bit.band(at,0xFF)local av=bit.band(bit.brshift(bit.band(at,0xFF00),8),0xFF)local aw=bit.band(bit.brshift(bit.band(at,0xFF0000),16),0xFF)local ax=bit.band(bit.brshift(bit.band(at,0xFF000000),24),0xFF)self.ctr={}for o=1,16 do self.ctr[o]=0 end;self.ctr[1]=au;self.ctr[2]=av;self.ctr[3]=aw;self.ctr[4]=ax else error("set_ctr: Counter type is not supported: "..type(at),2)end end,generate=function(self,ay)local az={}if#self.stream_cache>=ay then for o=1,ay do table.insert(az,table.remove(self.stream_cache))end else for o=1,#self.stream_cache do table.insert(az,table.remove(self.stream_cache))end;local aA=math.ceil((ay-#az)/16)for o=1,aA-1 do self.ctr=ap(self.ctr)local af=encrypt_block(self.ctr,self.key)for o=1,16 do table.insert(az,af[o])end end;self.ctr=ap(self.ctr)local af=encrypt_block(self.ctr,self.key)for o=1,ay-#az do table.insert(az,table.remove(af))end;for o=1,#af do table.insert(self.stream_cache,table.remove(af))end end;return az end}function new_ctrMode(aa,aj)local aB={stream_cache={},key={},iv={},__index=as}setmetatable(aB,aB)aB:set_key(aa)aB:set_ctr(aj)return aB end
